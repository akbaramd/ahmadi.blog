generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  content     String?

  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String

  categoryId  Int?
  category    Category? @relation(fields: [categoryId], references: [id])

  thumbnailId Int?
  thumbnail   Media?    @relation(fields: [thumbnailId], references: [id])

  tags        Tag[]     @relation("PostTags")

  @@index([name])
}

model Media {
  id        Int      @id @default(autoincrement())
  path      String
  alt       String?
  mimeType  String?
  size      Int
  createdAt DateTime @default(now())

  posts     Post[]   
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String @unique
  title  String @unique
  posts Post[] @relation("PostTags")
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String @unique
  title  String @unique
  posts Post[]
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
model Socials {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title        String
  link         String
}
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  bio           String?
  accounts      Account[]
  sessions      Session[]
  socials       Socials[]
  posts         Post[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
